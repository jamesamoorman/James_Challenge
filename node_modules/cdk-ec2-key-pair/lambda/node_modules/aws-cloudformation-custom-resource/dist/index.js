"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardLogger = exports.CustomResource = void 0;
const https = require("https");
const URL = require("url");
/**
 * Custom CloudFormation resource helper
 */
class CustomResource {
    constructor(context, callback, logger) {
        /**
         * Stores functions executed when resource creation is requested
         */
        this.createFunctions = [];
        /**
         * Stores functions executed when resource update is requested
         */
        this.updateFunctions = [];
        /**
         * Stores functions executed when resource deletion is requested
         */
        this.deleteFunctions = [];
        /**
         * Stores values returned to CloudFormation
         */
        this.ResponseData = {};
        this.context = context;
        this.callback = callback;
        this.logger = logger || new StandardLogger();
    }
    /**
     * Adds a function to the CREATE queue
     */
    onCreate(func) {
        this.createFunctions.push(func);
        return this;
    }
    /**
     * Adds a function to the UPDATE queue
     */
    onUpdate(func) {
        this.updateFunctions.push(func);
        return this;
    }
    /**
     * Adds a function to the DELETE queue
     */
    onDelete(func) {
        this.deleteFunctions.push(func);
        return this;
    }
    /**
     * Handles the Lambda event
     */
    handle(event) {
        const lambdaEvent = event;
        const self = this;
        if (typeof lambdaEvent.ResponseURL === 'undefined') {
            throw new Error('ResponseURL missing');
        }
        this.logger.debug(`REQUEST RECEIVED:\n${JSON.stringify(lambdaEvent)}`);
        this.timeout(lambdaEvent);
        event.addResponseValue = (key, value) => {
            self.ResponseData[key] = value;
        };
        event.setPhysicalResourceId = (value) => {
            self.PhysicalResourceId = value;
        };
        try {
            let queue;
            if (lambdaEvent.RequestType == 'Create')
                queue = this.createFunctions;
            else if (lambdaEvent.RequestType == 'Update')
                queue = this.updateFunctions;
            else if (lambdaEvent.RequestType == 'Delete')
                queue = this.deleteFunctions;
            else {
                this.sendResponse(lambdaEvent, 'FAILED', `Unexpected request type: ${lambdaEvent.RequestType}`);
                return this;
            }
            let result = queue.reduce((current, next) => {
                return current.then((value) => {
                    return next(value);
                });
            }, Promise.resolve(event));
            result
                .then(function (event) {
                self.logger.debug(event);
                self.sendResponse(lambdaEvent, 'SUCCESS', `${lambdaEvent.RequestType} completed successfully`);
            })
                .catch(function (err) {
                self.logger.error(err, err.stack);
                self.sendResponse(lambdaEvent, 'FAILED', err.message || err.code);
            });
        }
        catch (err) {
            this.sendResponse(lambdaEvent, 'FAILED', err.message || err.code);
        }
        return this;
    }
    /**
     * Sends CloudFormation response just before the Lambda times out
     */
    timeout(event) {
        const self = this;
        const handler = () => {
            self.logger.error('Timeout FAILURE!');
            new Promise(() => self.sendResponse(event, 'FAILED', 'Function timed out')).then(() => self.callback(new Error('Function timed out')));
        };
        setTimeout(handler, this.context.getRemainingTimeInMillis() - 1000);
    }
    /**
     * Sends CloudFormation response
     */
    sendResponse(event, responseStatus, responseData) {
        const self = this;
        this.logger.debug(`Sending response ${responseStatus}:\n${JSON.stringify(responseData)}`);
        const data = this.ResponseData;
        data['Message'] = responseData;
        const body = JSON.stringify({
            Status: responseStatus,
            Reason: `${responseData} | Full error in CloudWatch ${this.context.logStreamName}`,
            PhysicalResourceId: self.PhysicalResourceId ||
                event.PhysicalResourceId ||
                event.ResourceProperties.Name,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            Data: data,
        });
        this.logger.debug('RESPONSE BODY:\n', body);
        const url = URL.parse(event.ResponseURL);
        const options = {
            hostname: url.hostname,
            port: 443,
            path: url.path,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': body.length,
            },
        };
        this.logger.info('SENDING RESPONSE...\n');
        const request = https.request(options, function (response) {
            self.logger.debug(`STATUS: ${response.statusCode}`);
            self.logger.debug(`HEADERS: ${JSON.stringify(response.headers)}`);
            self.context.done();
        });
        request.on('error', function (error) {
            self.logger.error(`sendResponse Error: ${error}`);
            self.context.done();
        });
        request.write(body);
        request.end();
    }
}
exports.CustomResource = CustomResource;
/**
 * Standard logger class
 */
class StandardLogger {
    constructor(level) {
        this.level = level || 1 /* WARN */;
    }
    /**
     * Logs message with level ERROR
     */
    error(message, ...optionalParams) {
        if (this.level < 0 /* ERROR */)
            return;
        console.error(message, ...optionalParams);
    }
    /**
     * Logs message with level WARN
     */
    warn(message, ...optionalParams) {
        if (this.level < 1 /* WARN */)
            return;
        console.warn(message, ...optionalParams);
    }
    /**
     * Logs message with level INFO
     */
    info(message, ...optionalParams) {
        if (this.level < 2 /* INFO */)
            return;
        console.info(message, ...optionalParams);
    }
    /**
     * Logs message with level DEBUG
     */
    debug(message, ...optionalParams) {
        if (this.level < 3 /* DEBUG */)
            return;
        console.debug(message, ...optionalParams);
    }
    /**
     * Alias for info
     */
    log(message, ...optionalParams) {
        this.info(message, ...optionalParams);
    }
}
exports.StandardLogger = StandardLogger;
//# sourceMappingURL=data:application/json;base64,